AWSTemplateFormatVersion: 2010-09-09
Description: A sample CloudFormation YAML template to create s3 bucket for static website hosting and point to purchase domain using AWS route 53.

Parameters:
  WebsiteDomainName:
    Type: String
    Description: "Domain name of website"
    Default: "demo-work.online"  # Optional default value, if not provided, cloudformation will prompt you to enter when "create stack".
  HostedZoneIdForS3:
    Type: String
    Description: Specify the hosted zone ID for the region that you created the bucket in, refer https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints
    Default: "Z3AQBSTGFYJSTF" # for us-east-1, you can overide when create stack

Resources:
  S3BucketWww:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Retain"
    Properties:
      BucketName: !Sub "www.${WebsiteDomainName}"
      WebsiteConfiguration:
        IndexDocument: "index.html"
        # ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
        - ObjectOwnership: "BucketOwnerEnforced"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"
  S3BucketPolicy:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::S3::BucketPolicy"
    DeletionPolicy: "Retain"
    Properties:
      Bucket:
        Ref: "S3BucketWww"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: !Sub "arn:aws:s3:::www.${WebsiteDomainName}/*"
          Action: "s3:GetObject"
          Effect: "Allow"
          Principal: "*"
          Sid: "PublicReadGetObject"
  S3BucketDomain:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Retain"
    Properties:
      BucketName: !Ref WebsiteDomainName
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          Protocol: "http"
          HostName: !Sub "www.${WebsiteDomainName}"
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      OwnershipControls:
        Rules:
        - ObjectOwnership: "BucketOwnerEnforced"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"     
  MyHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref WebsiteDomainName  # create hostedzone with the same name as domain
  HostedZoneARecord1:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !Sub "s3-website-${AWS::Region}.amazonaws.com"
        HostedZoneId: !Ref HostedZoneIdForS3
      HostedZoneId: !GetAtt MyHostedZone.Id
      Name: !Ref WebsiteDomainName
      Type: A
  HostedZoneARecord2:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !Sub "s3-website-${AWS::Region}.amazonaws.com"
        HostedZoneId: !Ref HostedZoneIdForS3
      HostedZoneId: !GetAtt MyHostedZone.Id
      Name: !Sub "www.${WebsiteDomainName}"
      Type: A